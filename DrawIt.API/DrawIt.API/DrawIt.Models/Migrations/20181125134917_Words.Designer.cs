// <auto-generated />
using System;
using DrawIt.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DrawIt.Models.Migrations
{
    [DbContext(typeof(DrawItAPIContext))]
    [Migration("20181125134917_Words")]
    partial class Words
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrawIt.Models.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DrawIt.Models.Data.Categorie", b =>
                {
                    b.Property<Guid>("categorieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("categorieEng");

                    b.Property<string>("categorieNl");

                    b.HasKey("categorieId");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("DrawIt.Models.Data.Word", b =>
                {
                    b.Property<int>("wordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DNGuessed");

                    b.Property<int>("Guessed");

                    b.Property<int>("dislikes");

                    b.Property<int>("likes");

                    b.Property<string>("wordEng");

                    b.Property<string>("wordNl");

                    b.HasKey("wordId");

                    b.ToTable("Word");

                    b.HasData(
                        new { wordId = 1, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Desktop", wordNl = "Computer" },
                        new { wordId = 2, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Popcorn", wordNl = "Popcorn" },
                        new { wordId = 3, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Island", wordNl = "Eiland" },
                        new { wordId = 4, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Santa Claus", wordNl = "Kerstman" },
                        new { wordId = 5, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Toothbrush", wordNl = "Tandenborstel" },
                        new { wordId = 6, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Shopping cart", wordNl = "Winkelwagen" },
                        new { wordId = 7, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Traffic light", wordNl = "Koptelefoon" },
                        new { wordId = 8, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Heater", wordNl = "Verwarming" },
                        new { wordId = 9, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Sunglasses", wordNl = "Zonnebril" },
                        new { wordId = 10, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Ferris wheel", wordNl = "Reuzenrad" },
                        new { wordId = 11, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Lamppost", wordNl = "Lantaarnpaal" },
                        new { wordId = 12, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Red", wordNl = "Rood" },
                        new { wordId = 13, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Desktop", wordNl = "Computer" },
                        new { wordId = 14, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Curtain", wordNl = "Gordijn" },
                        new { wordId = 15, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Desktop", wordNl = "Computer" },
                        new { wordId = 16, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Sleigh", wordNl = "Slee" },
                        new { wordId = 17, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Brain", wordNl = "Hersens" },
                        new { wordId = 18, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Clothespin", wordNl = "Wasknijper" },
                        new { wordId = 19, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Sandwich", wordNl = "Boterham" },
                        new { wordId = 20, DNGuessed = 0, Guessed = 0, dislikes = 0, likes = 0, wordEng = "Diaper", wordNl = "Luier" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DrawIt.Models.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DrawIt.Models.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrawIt.Models.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DrawIt.Models.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
